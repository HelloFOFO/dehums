<!-- BEGIN HEADER -->
<%include widget/header%>
<!-- END HEADER -->



<!--BEGIN LOAD PAGE LEVEL CSS STYLE-->
<!--<link href="/css/pages/device.css" rel="stylesheet" media="screen">-->
<!--END LOAD PAGE LEVEL CSS STYLE-->

<!-- BEGIN PAGE CONTAINER -->
<div class="page-container">
    <div class="page-content">
        <!-- BEGIN PAGE CONTENT -->
        <div class="container" style="min-height: 800px">
            <div class="dehum-content-title ">【<%- deviceInfo.areaName%>】-【<%- deviceInfo.boxName%>】#<%- deviceInfo.devNum%>除湿机</div>
            <div class="row" style="margin-top: 15px;">
                <div class="col-lg-12 col-md-12 dehum-content-subtitle">
                    <span>今日报警数量</span>
                    <span class="dehum-content-subtitle-value" id="span_alarm_today">
                        <a href="#">
                            <%- deviceInfo.cnt_alarms%>
                        </a>
                    </span>
                </div>
            </div>
            <div class="row" style="margin-top: 15px;">
                <div class="col-lg-6 col-md-6">
                    <div class="dehum-content-subtitle dehum-div-border">
                        <span>温度</span>
                    </div>
                    <div class="dehum-div-border text-center">
                        <div id="div_chart_temp" style="height:300px; width: 100%;">
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 col-md-6">
                    <div class="dehum-content-subtitle dehum-div-border">
                        <span>湿度</span>
                    </div>
                    <div class="dehum-div-border">
                        <div id="div_chart_hum" style="height:300px; width: 100%;">

                        </div>
                    </div>
                </div>
            </div>
            <div class="row" style="margin-top: 15px;">
                <div class="col-lg-6 col-md-6">
                    <div class="dehum-content-subtitle dehum-div-border">
                        <span>除湿时间/用电</span>
                    </div>
                    <div class="dehum-div-border">
                        <div id="div_chart_dehum_usage" style="height:300px; width: 100%;">

                        </div>
                    </div>
                </div>
                <div class="col-lg-6 col-md-6">
                    <div class="dehum-content-subtitle dehum-div-border">
                        <span>加热时间/用电</span>
                    </div>
                    <div class="dehum-div-border text-center">
                        <div id="div_chart_heat_usage" style="height:300px; width: 100%;">
                        </div>
                    </div>
                </div>
            </div>

            <!-- END PAGE CONTENT -->
    </div>
</div>
</div>
<!-- END PAGE CONTAINER -->



<!-- BEGIN FOOTER -->
<%include widget/footer%>
<!-- END FOOTER -->

<script>

    // 这儿偷懒一下，把后端传过来的对象直接赋值给js对象
    let deviceInfo = JSON.parse('<%-JSON.stringify(deviceInfo)%>')

    function drawChartTempAndHum(){
        let time = []
        for (var i = 0; i <= 1440; i++) {
            var min = (i % 60);
            if (min < 10)
                min = "0" + min
            var hour = parseInt(i / 60)
            if (hour < 10)
                hour = "0" + hour
            var label = hour + ":" + min;
            time.push(label);
        }

        let temperature = []
        let hum = []

        let chartTemp = echarts.init(document.getElementById('div_chart_temp'), 'dark');
        let chartHum = echarts.init(document.getElementById('div_chart_hum'), 'dark');

        chartTemp.showLoading({
            text: '数据正在加载...',
            textStyle: { fontSize : 30 , color: '#444' },
            effectOption: {backgroundColor: 'rgba(0, 0, 0, 0)'}
        });

        chartHum.showLoading({
            text: '数据正在加载...',
            textStyle: { fontSize : 30 , color: '#444' },
            effectOption: {backgroundColor: 'rgba(0, 0, 0, 0)'}
        });

        let optionChartTemp = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'cross',
                    crossStyle: {
                        color: '#999'
                    }
                }
            },
            xAxis: [
                {
                    type: 'category',
                    data: time,
                    axisPointer: {
                        type: 'shadow'
                    }
                }
            ],
            yAxis: [
                {
                    type: 'value',
                    name: '温度',
                    min: -20,
                    max: 100,
                    interval: 20,
                    axisLabel: {
                        formatter: '{value}'
                    }
                }
            ],
            series: [
                {
                    name: '温度',
                    type: 'line',
                    data: temperature
                }
            ],
            toolbox: {
                show : true,//是否显示工具栏组件
                orient: 'horizontal',//工具栏icon的布局朝向
                x: 'right',
                y: 'top',
                color : ['#1e90ff','#22bb22','#4b0082','#d2691e'],
                backgroundColor: 'rgba(0,0,0,0)', // 工具箱背景颜色
                borderColor: '#ccc',       // 工具箱边框颜色
                borderWidth: 0,            // 工具箱边框线宽，单位px，默认为0（无边框）
                padding: [5, 5, 0, 0],                // 工具箱内边距，单位px，默认各方向内边距为5，
                showTitle: true,//是否在鼠标hover时显示每个工具icon标题
                feature : {
                    dataView : {
                        show : true,
                        title : '数据视图',
                        readOnly: true,
                        lang : ['数据视图', '关闭', '刷新'],
                        optionToContent: function(opt) {
                            var axisData = opt.xAxis[0].data;
                            var series = opt.series;
                            var table = '<table border=1 style="width:100%;text-align:center;color:black;"><tbody><tr>'
                                + '<td>时间</td>';
                            for (var i=0; i<series.length; i++)
                            {

                                table += '<td>' + series[i].name + '</td>';
                            }
                            table += '</tr>';
                            for (var i=0; i<axisData.length; i++)
                            {
                                if(i < series[0].data.length)
                                {
                                    table += '<tr>' + '<td>' + axisData[i] + '</td>';
                                    for(var j=0; j<series.length; j++)
                                    {
                                        var val = series[j].data[i];
                                        if(val != '-')
                                        {
                                            var v = new Number(val);
                                            val = v.toFixed(2);
                                        }
                                        table += '<td>' + val + '</td>';
                                    }
                                    table += '</tr>';
                                }
                            }
                            table += '</tbody></table>';
                            var str = "<div style='overflow:auto;width:100%;height:100%;'>" + table + "</div>";
                            return str;
                        }
                    }
                }
            }
        }

        let optionChartHum = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'cross',
                    crossStyle: {
                        color: '#999'
                    }
                }
            },
            xAxis: [
                {
                    type: 'category',
                    data: time,
                    axisPointer: {
                        type: 'shadow'
                    }
                }
            ],
            yAxis: [
                {
                    type: 'value',
                    name: '湿度',
                    min: 0,
                    max: 100,
                    interval: 20,
                    axisLabel: {
                        formatter: '{value}'
                    }
                }
            ],
            series: [
                {
                    name: '湿度',
                    type: 'line',
                    data: hum
                }
            ],
            toolbox: {
                show : true,//是否显示工具栏组件
                orient: 'horizontal',//工具栏icon的布局朝向
                x: 'right',
                y: 'top',
                color : ['#1e90ff','#22bb22','#4b0082','#d2691e'],
                backgroundColor: 'rgba(0,0,0,0)', // 工具箱背景颜色
                borderColor: '#ccc',       // 工具箱边框颜色
                borderWidth: 0,            // 工具箱边框线宽，单位px，默认为0（无边框）
                padding: [5, 5, 0, 0],                // 工具箱内边距，单位px，默认各方向内边距为5，
                showTitle: true,//是否在鼠标hover时显示每个工具icon标题
                feature : {
                    dataView : {
                        show : true,
                        title : '数据视图',
                        readOnly: true,
                        lang : ['数据视图', '关闭', '刷新'],
                        optionToContent: function(opt) {
                            var axisData = opt.xAxis[0].data;
                            var series = opt.series;
                            var table = '<table border=1 style="width:100%;text-align:center;color:black;"><tbody><tr>'
                                + '<td>时间</td>';
                            for (var i=0; i<series.length; i++)
                            {

                                table += '<td>' + series[i].name + '</td>';
                            }
                            table += '</tr>';
                            for (var i=0; i<axisData.length; i++)
                            {
                                if(i < series[0].data.length)
                                {
                                    table += '<tr>' + '<td>' + axisData[i] + '</td>';
                                    for(var j=0; j<series.length; j++)
                                    {
                                        var val = series[j].data[i];
                                        if(val != '-')
                                        {
                                            var v = new Number(val);
                                            val = v.toFixed(2);
                                        }
                                        table += '<td>' + val + '</td>';
                                    }
                                    table += '</tr>';
                                }
                            }
                            table += '</tbody></table>';
                            var str = "<div style='overflow:auto;width:100%;height:100%;'>" + table + "</div>";
                            return str;
                        }
                    }
                }
            }
        }

        $.ajax({
            url:'/ajax/device/tempAndHum',
            method:'GET',
            data:deviceInfo
        }).done(function(data) {
            let dataChart = data
            for(var i in dataChart){
                var time = dataChart[i].time
                var hh = moment(time).get('hours')
                var mi = moment(time).get('minutes')
                temperature[hh*60+mi] = dataChart[i].temp_value
                hum[hh*60+mi] = dataChart[i].hum_value
            }
            chartTemp.setOption(optionChartTemp, true)
            chartTemp.hideLoading()
            chartHum.setOption(optionChartHum, true)
            chartHum.hideLoading()
        })
    }

    function drawChartUsage(){
        let calDt = []
        let dehumTime = []
        let dehumWH = []
        let heatTime = []
        let heatWH = []

        let chart3 = echarts.init(document.getElementById('div_chart_dehum_usage'), 'dark');
        let chart4 = echarts.init(document.getElementById('div_chart_heat_usage'), 'dark');

        chart3.showLoading({
            text: '数据正在加载...',
            textStyle: { fontSize : 30 , color: '#444' },
            effectOption: {backgroundColor: 'rgba(0, 0, 0, 0)'}
        });

        chart4.showLoading({
            text: '数据正在加载...',
            textStyle: { fontSize : 30 , color: '#444' },
            effectOption: {backgroundColor: 'rgba(0, 0, 0, 0)'}
        });

        let option3 = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'cross',
                    crossStyle: {
                        color: '#999'
                    }
                }
            },
            legend: {
                data: ['除湿时间', '除湿用电']
            },
            xAxis: [
                {
                    type: 'category',
                    data: calDt,
                    axisPointer: {
                        type: 'shadow'
                    }
                }
            ],
            yAxis: [
                {
                    type: 'value',
                    name: '时长',
                    min: 0,
                    max: 1200,
                    interval: 200,
                    axisLabel: {
                        formatter: '{value} s'
                    }
                },
                {
                    type: 'value',
                    name: '电量',
                    min: 0,
                    max: 1200,
                    interval: 200,
                    axisLabel: {
                        formatter: '{value} Wh'
                    }
                }
            ],
            series: [
                {
                    name: '除湿时间',
                    type: 'bar',
                    data: dehumTime
                },
                {
                    name: '除湿用电',
                    type: 'line',
                    yAxisIndex: 1,
                    data: dehumWH
                }
            ],
            toolbox: {
                show : true,//是否显示工具栏组件
                orient: 'horizontal',//工具栏icon的布局朝向
                x: 'right',
                y: 'top',
                color : ['#1e90ff','#22bb22','#4b0082','#d2691e'],
                backgroundColor: 'rgba(0,0,0,0)', // 工具箱背景颜色
                borderColor: '#ccc',       // 工具箱边框颜色
                borderWidth: 0,            // 工具箱边框线宽，单位px，默认为0（无边框）
                padding: [5, 5, 0, 0],                // 工具箱内边距，单位px，默认各方向内边距为5，
                showTitle: true,//是否在鼠标hover时显示每个工具icon标题
                feature : {
                    dataView : {
                        show : true,
                        title : '数据视图',
                        readOnly: true,
                        lang : ['数据视图', '关闭', '刷新'],
                        optionToContent: function(opt) {
                            var axisData = opt.xAxis[0].data;
                            var series = opt.series;
                            var table = '<table border=1 style="width:100%;text-align:center;color:black;"><tbody><tr>'
                                + '<td>时间</td>';
                            for (var i=0; i<series.length; i++)
                            {

                                table += '<td>' + series[i].name + '</td>';
                            }
                            table += '</tr>';
                            for (var i=0; i<axisData.length; i++)
                            {
                                if(i < series[0].data.length)
                                {
                                    table += '<tr>' + '<td>' + axisData[i] + '</td>';
                                    for(var j=0; j<series.length; j++)
                                    {
                                        var val = series[j].data[i];
                                        if(val != '-')
                                        {
                                            var v = new Number(val);
                                            val = v.toFixed(2);
                                        }
                                        table += '<td>' + val + '</td>';
                                    }
                                    table += '</tr>';
                                }
                            }
                            table += '</tbody></table>';
                            var str = "<div style='overflow:auto;width:100%;height:100%;'>" + table + "</div>";
                            return str;
                        }
                    }
                }
            }
        }

        let option4 = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'cross',
                    crossStyle: {
                        color: '#999'
                    }
                }
            },
            legend: {
                data: ['加热时间', '加热用电']
            },
            xAxis: [
                {
                    type: 'category',
                    data: calDt,
                    axisPointer: {
                        type: 'shadow'
                    }
                }
            ],
            yAxis: [
                {
                    type: 'value',
                    name: '时长',
                    min: 0,
                    max: 900,
                    interval: 150,
                    axisLabel: {
                        formatter: '{value} s'
                    }
                },
                {
                    type: 'value',
                    name: '电量',
                    min: 0,
                    max: 900,
                    interval: 150,
                    axisLabel: {
                        formatter: '{value} WH'
                    }
                }
            ],
            series: [
                {
                    name: '加热时间',
                    type: 'bar',
                    data: heatTime
                },
                {
                    name: '加热用电',
                    type: 'line',
                    yAxisIndex: 1,
                    data: heatWH
                }
            ],
            toolbox: {
                show : true,//是否显示工具栏组件
                orient: 'horizontal',//工具栏icon的布局朝向
                x: 'right',
                y: 'top',
                color : ['#1e90ff','#22bb22','#4b0082','#d2691e'],
                backgroundColor: 'rgba(0,0,0,0)', // 工具箱背景颜色
                borderColor: '#ccc',       // 工具箱边框颜色
                borderWidth: 0,            // 工具箱边框线宽，单位px，默认为0（无边框）
                padding: [5, 5, 0, 0],                // 工具箱内边距，单位px，默认各方向内边距为5，
                showTitle: true,//是否在鼠标hover时显示每个工具icon标题
                feature : {
                    dataView : {
                        show : true,
                        title : '数据视图',
                        readOnly: true,
                        lang : ['数据视图', '关闭', '刷新'],
                        optionToContent: function(opt) {
                            var axisData = opt.xAxis[0].data;
                            var series = opt.series;
                            var table = '<table border=1 style="width:100%;text-align:center;color:black;"><tbody><tr>'
                                + '<td>时间</td>';
                            for (var i=0; i<series.length; i++)
                            {

                                table += '<td>' + series[i].name + '</td>';
                            }
                            table += '</tr>';
                            for (var i=0; i<axisData.length; i++)
                            {
                                if(i < series[0].data.length)
                                {
                                    table += '<tr>' + '<td>' + axisData[i] + '</td>';
                                    for(var j=0; j<series.length; j++)
                                    {
                                        var val = series[j].data[i];
                                        if(val != '-')
                                        {
                                            var v = new Number(val);
                                            val = v.toFixed(2);
                                        }
                                        table += '<td>' + val + '</td>';
                                    }
                                    table += '</tr>';
                                }
                            }
                            table += '</tbody></table>';
                            var str = "<div style='overflow:auto;width:100%;height:100%;'>" + table + "</div>";
                            return str;
                        }
                    }
                }
            }
        }

        $.ajax({
            url:'/ajax/device/summaryUsage',
            method:'GET',
            data:deviceInfo
        }).done(function(data) {
            let chartData = data
            for(var i in chartData){
                calDt.push(moment(chartData[i].cal_dt).format('YYYY-MM-DD'))
                dehumTime.push(chartData[i].dehum_total_time)
                dehumWH.push(chartData[i].dehum_total_wh)
                heatTime.push(chartData[i].heat_total_time)
                heatWH.push(chartData[i].heat_total_wh)
            }

            //重新计算X/Y轴的最大最小值
            var maxDehumTime = Math.max.apply(null, dehumTime.concat(1200))
            var maxDehumTimeY = Math.ceil(maxDehumTime/600)*600
            var intervalDehumTimeY = maxDehumTimeY/6
            option3.yAxis[0].max = maxDehumTimeY
            option3.yAxis[0].interval = intervalDehumTimeY

            var maxDehumWh = Math.max.apply(null, dehumWH.concat(1200))
            var maxDehumWhY = Math.ceil(maxDehumWh/600)*600
            var intervalDehumWhY = maxDehumWhY/6
            option3.yAxis[1].max = maxDehumWhY
            option3.yAxis[1].interval = intervalDehumWhY

            var maxHeatTime = Math.max.apply(null, heatTime.concat(1200))
            var maxHeatTimeY = Math.ceil(maxHeatTime/600)*600
            var intervalHeatTimeY = maxHeatTimeY/6
            option4.yAxis[0].max = maxHeatTimeY
            option4.yAxis[0].interval = intervalHeatTimeY

            var maxHeatWh = Math.max.apply(null, heatWH.concat(1200))
            var maxHeatWhY = Math.ceil(maxHeatWh/600)*600
            var intervalHeatWhY = maxHeatWhY/6
            option4.yAxis[1].max = maxHeatWhY
            option4.yAxis[1].interval = intervalHeatWhY

            chart3.setOption(option3, true)
            chart3.hideLoading()
            chart4.setOption(option4, true)
            chart4.hideLoading()
        })
    }

    function initPage(){
        drawChartTempAndHum()
        drawChartUsage()

        let beginDate = moment(new Date()).format("YYYY-MM-DD")
        let endDate = moment(new Date()).format("YYYY-MM-DD")
        strHref = "/alarms?dev=<%- deviceInfo.areaNum%>_<%- deviceInfo.boxNum%>_<%- deviceInfo.devNum%>&beginDate="+beginDate+"&endDate="+endDate
        // alert(strHref)
        $('#span_alarm_today a').attr("href", strHref)
    }

    $(document).ready(initPage)
</script>


</body>
<!-- END BODY -->
</html>